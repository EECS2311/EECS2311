# Meeting Minutes

## Jan 25th
- Approx 20 minute meeting with all group members at the end of class.
- Organized day when group members can meet to discuss with our user for the project.
- Discussed creating a log file.


## Jan 31st 
- Quick discussion after class with professor to discuss how to move forward with the next iterations of the project. 
- Also discussed potential alternatives to utilizing a DB, such as reading from JSON file.
- Discussed with team members about what to name the project, and the potential GUI options

## Feb 3rd
- Met the customer and heard her requests
- Discussed what we could do by the first delivery
- Provided estimate delivery time

## Feb 10th
- Meeting over discord to discuss designation of work.
- Finalized user stories and software used to diagram work 
- Created User Story Cards
- Organizing potential classes needed for Iteration 0,1. 

## Feb 14th 
- Over discord messaging, further discussed the needed requirements for the Itr1 deadline. 

--- 

## Itr 1 Summary

### Big Design Decisions
- We decided to begin building out the UI's with Java.swing as opposed to JavaFx. More team members were familiar with it so it would be quicker to begin development. Having to install an additional package as opposed to using the built in java.swing, was another consideration.
- In order to develop the UI, we went with a model with components and Views. The views display the GUI while the components make up the view. This sort of separation of concerns made development much easier.

### Concerns/Obstacles
- Since every member has varying levels of knowledge on git and github, some basic operations needed a bit more explanation. 

### User Stories
1. Create Home Class (Sarah)
Dev Tasks..
- Create the container class. A container represents a pantry/fridge of items that users can add and delete from. 
- Create Home and ContainerView, using java.swing to develop the UI.
- Setup the home to receive user input (name of container to be created).
- Create stub db class. 

Estimated Working time: 2 Days
Actual Working time: 7 Days
- Setting up this user story took longer than estimated. It also served as the foundation for other user stories as there must be consistent logic for setting up the UI and data binding.


2. Add Items Class (Nina)
Dev Tasks..
- Create item class to represent a food added to a user's pantry.
- Setup the AddItemPanel view to receive user input. 
- Implement error handling on user input.
- Populate stub db with items. 
- Test implementation of adding an item

Estimated Working time: 2 Days
Actual Working time: 3 Days

3. Remove Item from Pantry (Michel)
Dev Tasks...
- Create DeleteItemView to prompt user for the item they want to remove from their pantry.
- Implement error handling on user input to ensure that items actually exist in the database.
- Test implementation of deleting an item 

Estimated Working time: 2 Days
Actual Working time: 3 Days
 
4. Tagging Food Groups (Edison)
Dev Tasks...
- Create tag class and several "tag" classes.
- Implement tagging test cases 

Estimated Working time: 2 Days
Actual Working time: 1 Days

5. See Full List of items (Allen)
Dev Tasks...
- Create ItemsList view to display list of items 
- Display this view over top the containerView

Estimated Working time: 2 Days
Actual Working time: 1 Days

6. Add User (Ning)
Dev Tasks...
- Setup user class to implement user logins in future iterations

Estimated Working time: 2 Days
Actual Working time: 1 Days


# Up to Deliverable 1 - Meeting minutes

## Feb 20th 

- Discussing what needs
- Make sure that there's no logic in the GUI folder
- Ensure that the all the java files in the GUI folder are suffixed with "View"
- Setup and start working with PostgreSQL database
- Need to setup database Schema

Focus: 
- Cleaning up the UI
- Setting up the Database
- Writing detailed ITr2 User Stories

# Iteration 2 

## Meeting Minutes 
## March 1st 
- Team meeting on Zoom
- Discussed old bugs from deliverable 1 and any feedback given from the presentation.
- Reviewed the detailed iteration 2 stories and discussed how they might work.
- Assigned one user story to each member

## User Stories

BIG Story: Pantry Awareness (This big story aims to help the user make more informed decisions about what is in their pantry, by developing the virtual fridge)

Colour Coded Fridge Items
Priority: Low
Cost: 1 Days
Colour coded fridge items would be extremely beneficial. For example, food items that are going bad could be coloured red. This should give a sense of urgency for me to use them. The food groups could also be colour coded.

Calendar
Priority: High
Cost: 2 Days
I want to see all food expiry dates in a calendar format. This will help me have a better idea of when foods will go bad. This should help me make more informed decisions about what I cook.

Manage Grocery List
Priority: Med
Cost: 2 Days
I definitely would like to have a grocery list feature implemented. When I see that food is running low or has expired, it would be great to add them to a grocery list.
QUESTION: Is it better to have one big grocery list or one per pantry/container?
One big list is preferred

Generate Food Storage Tips
Priority: Med
Cost: 1 Day
I'd like to be able to choose an item and get proper food storage tips. This will help me ensure that my food lasts longer. 

Sorting
Priority: Low
Cost: 4 Days
It would be nice if I could sort foods based on food groups, and also based on the days that they will expire.

Notifications
Priority: Med
Cost: 2 Days
Whenever I open a pantry, I'd like to receive some instant notification on the app. This should mostly be for foods that are about to expire. This should help me be alert and aware of foods that are about to go bad. 

## Development Tasks

1. Colour Coded Fridge Items (Nina)
Dev Tasks: 
Colour coded item entries based on food freshness
Auto assign Food Freshness Tag based on distance between current date and expiry date
Make enums in database and enums in food group and food freshness consistent
Allow Food Group tag dropbox to update items enum in database
Display the item tags on ItemListView
Refactor itemUtility methods such as ​​verifyAddItem to return a boolean, making it consistent with verifyDeleteItem.
Add ItemUtility JUnit test
Estimated Cost: 1 Day
Actual Cost: 1 Day

2. Calendar (Sarah)
Dev Tasks: 
Create Calendar view
Retrieve items and corresponding expiry date information from the database, and display it in the calendar view.
Refactor SeeContainersView to use right click to edit or delete containers instead of a separate page

Estimated Cost: 2 Days
Actual Cost: 1 Days

3. Manage Grocery List (Ning)
Dev Tasks: 
Implement add, remove, and export functionalities. 
Design GUI components for interaction. 
Enable strikethrough font for crossed off items. 
Handle user interactions and events. 
Ensure data consistency and error handling.
Estimated Cost: 2 Days
Actual Cost: 2 Day

4. Generate Food Storage Tips (Michel)
Dev Tasks: 
Update database schema to include table for storing food tips
Setup right click popup menu with generate storage tip option.
Initialise storage tips database with some values for the user.
Create a utility function to query the database with the name of the item that the user wants a tip for.
Estimated Cost: 1 Day
Actual Cost: 2 Days

5. Sorting (Edison)
Dev Tasks: 
Integrate database for storing a food item in a container
Initialise database on program startup to load each item to their respective container from the database
Include test cases for database integration
Implement sorting and filtering functionality to the JTable inside of a container.
Estimated Cost: 1 Days
Actual Cost: 1 Days

6. Notifications (Allen)
Dev Tasks:  
-  Creating notification that alerts the users of expired or soon to expire products.
Update database to allow notification read through the database for expired products.
Initialise the notifications to work with newly created containers and already existing containers.

Estimated Cost: 1 Days
Actual Cost: 1 Days



